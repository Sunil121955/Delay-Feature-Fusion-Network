dataDir = 'path\of\train\folder'; % Path to the training data folder
trainData = imageDatastore(dataDir, 'IncludeSubfolders', true, 'LabelSource', 'foldernames');
numClasses = numel(categories(trainData.Labels));

dataDir = 'path\of\val\folder'; % Path to the validation data folder
valData = imageDatastore(dataDir, 'IncludeSubfolders', true, 'LabelSource', 'foldernames');
%Create a DCNN model for training
inputSize = lgraph_1.Layers(1).InputSize;
%Data Augumentation
pixelRange = [-30 30];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange);
% Train data Augumentation
augimdsTrain = augmentedImageDatastore(inputSize(1:2),trainData,'ColorPreprocessing', 'gray2rgb', ...
    'DataAugmentation',imageAugmenter);
% Validation data Augumentation
augimdsValidation = augmentedImageDatastore(inputSize(1:2),valData,'ColorPreprocessing', 'gray2rgb');
%Parameter Tuning
options = trainingOptions('adam', ...
    'MaxEpochs', 20, ...
    'MiniBatchSize', 32, ...
    'InitialLearnRate',0.0001, ...
    'ValidationData', augimdsValidation, ...
    'ValidationFrequency', 10, ...
    'Verbose', false, ...
    'Plots', 'training-progress');
%Train the DCNN model
cnnModel = trainNetwork(augimdsTrain, lgraph_1, options);
